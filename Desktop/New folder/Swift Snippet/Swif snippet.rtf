{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue;
\f3\fnil\fcharset0 LucidaGrande;\f4\fnil\fcharset178 GeezaPro;\f5\fmodern\fcharset0 Courier;
\f6\fnil\fcharset0 Tahoma;\f7\fnil\fcharset0 LucidaGrande-Bold;\f8\fnil\fcharset0 Verdana;
\f9\fnil\fcharset0 Menlo-Bold;\f10\fnil\fcharset0 Georgia;\f11\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red239\green244\blue249;\red61\green61\blue61;
\red255\green255\blue255;\red25\green25\blue25;\red36\green36\blue36;\red44\green44\blue44;\red246\green246\blue246;
\red235\green235\blue235;\red151\green0\blue126;\red0\green0\blue0;\red14\green115\blue192;\red19\green20\blue21;
\red52\green52\blue52;\red22\green25\blue31;\red46\green56\blue61;\red252\green39\blue18;\red20\green0\blue196;
}
{\*\expandedcolortbl;;\cssrgb\c20000\c20000\c20000;\cssrgb\c94902\c96471\c98039;\cssrgb\c30588\c30588\c30588;
\cssrgb\c100000\c100000\c100000;\cssrgb\c12941\c12941\c12941;\cssrgb\c18824\c18824\c18824;\cssrgb\c22745\c22745\c22745;\cssrgb\c97255\c97255\c97255;
\cssrgb\c93725\c93725\c93725;\cssrgb\c66667\c5098\c56863;\cssrgb\c0\c0\c0\c4706;\cssrgb\c0\c53333\c80000;\cssrgb\c9804\c10196\c10588\c80000;
\cssrgb\c26667\c26667\c26667;\cssrgb\c11373\c12941\c16078;\cssrgb\c23529\c28235\c30588;\cssrgb\c100000\c25271\c7591;\cssrgb\c10980\c0\c81176;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1001\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1201\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1301\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1401\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1501\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1601\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1701\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1801\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1901\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid20}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}}
\paperw11900\paperh16840\margl1440\margr1440\vieww11680\viewh10980\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 INiT\
\
1-\cf2 \expnd0\expndtw0\kerning0
\shad\shadx0\shady20\shadr20\shado0 \shadc0 Swift structures (and only structures) automatically generate a 
\b \shad\shadx0\shady20\shadr20\shado0 \shadc0 memberwise initializer
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 . This means you get a ready-made initializer for all the stored properties that don\'92t have default values. This is super handy, but there are several gotchas.\
\
2-you only get a memberwise initializer if a structure does not define any initializers. As soon as you define an initializer, you lose the automatic memberwise initializer.\
\
3- memberwise initializers only provide parameters for stored properties without default values\
\
4- As soon as you define an initializer, you lose the automatic memberwise initializer\
    But what if you still need the automatic memberwise initializer you can make extension to your \
	struct and it will generate member wise init again\
\
5-In t
\b \shad\shadx0\shady20\shadr20\shado0 \shadc0 he default initializer
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 , the name of the type is followed by empty parentheses. You can use default initializers when your types either don\'92t have any stored properties, or all of the type\'92s stored properties have default values. This holds true for both structures and classes.\
\
6- An initializer 
\b \shad\shadx0\shady20\shadr20\shado0 \shadc0 must
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0  assign a value to every single stored property that does not have a default value, or else you\'92ll get a compiler error. Remember that optional variables automatically have a default value of 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 nil
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 . \'97>
\b \shad\shadx0\shady20\shadr20\shado0 \shadc0  customers init
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
\
6-
\b \cf4 \cb5 \shad0 Initializer delegation
\b0  is the process in which Initializer can call another Initializer as part of instance\'92s Initialization.\'a0\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb5 \'a0\cb1 \
\cb5 By following initializer delegation process, we can avoid the code duplication across the multiple Initializers and by using self.init we can achieve initializer delegation process. We can use self.init only within our custom initializers.\
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 Delegate initialization is useful when you want to provide an alternate initializer argument list but you don\'92t want to repeat logic that is in your custom initializer. Also, using delegating initializers helps  reduce the amount of code you have to write
\fs36 \
\

\fs24 The only thing a delegating initializer can do is manipulate values that are passed into another initializer.\
\
7- 
\fs26 There are two ways to handle initialization failures in Swift: using 
\b failable initializers, and throwing from an initializer
\b0 . Initialization can fail for many reasons, including invalid input, a missing system resource such as a file, and possible network failures
\fs36 .\
\
-
\fs24 Failable initializers are great when returning 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 nil
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  is an option. For more serious errors, the other way to handle failure is throwing from an initializer.\
\

\fs26 -Consider using throwing initializers. Failable initializers can only express a binary failure/success situation. By using throwing initializers you can not only indicate failure, but also indicate a reason by throwing specific errors. Another benefit is that calling code can propagate any errors thrown by an initializer.\
Failable initializers are much simpler though, since you don\'92t need to define an error type and you can avoid all those extra 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 try?
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  keywords.\
\'97\'97\'97\'97\
Class INIT
\fs24 \
1- 
\f2 \cf6 \shad0 A 
\b \cf7 designated initializer
\b0 \cf6  is the primary initializer for a class. It must 
\b \cf7 fully initialize all properties introduced by its class before calling a superclass initializer
\b0 \cf6 . A class can have more than one designated initializer.\
\
2- \kerning1\expnd0\expndtw0  \expnd0\expndtw0\kerning0
A designated initializer must call a designated initializer from the immediate superclass.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf6 \kerning1\expnd0\expndtw0      \expnd0\expndtw0\kerning0
A convenience initializer must call another initializer from the same class.\
\pard\tx566\pardeftab720\partightenfactor0
\cf6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\f3 \cf6 3-
\f4  
\f3 INIT inherits	\
  
\f0 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 Every subclass that introduces a new non-optional stored property without a default value needs at least one designated initializer. The initializer should take in the initial value for 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 encasingMaterial(property in subclass)
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  in addition to initial values for all the properties declared in the 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 RocketComponent
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  superclass. \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 So we have to add a designated initializer that calls or overrides the designated initializer forth
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 e superclass 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 RocketComponent
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 .\
_________________________________________________________________________\\\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b\fs28 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 Collection types \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls2\ilvl0
\b0\fs24 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 1-\cf8 \cb9 \shad0 Swift provides three primary 
\i collection
\i0  types, known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations\
\pard\tx566\pardeftab720\partightenfactor0
\cf8 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf8 2-\cb5 Collections declared using 
\f5 \cb10 let
\f0 \cb5  are 
\i immutable
\i0  and cannot be altered at all after they are initialized. If you wish to make a collection 
\i mutable
\i0 , declare it with 
\f5 \cb10 var
\f0 \cb5 . Apple recommends declaring collections with 
\f5 \cb10 let
\f0 \cb5  as a default until you encounter the need to alter its contents, claiming that 
\f5 \cb10 let
\f0 \cb5  allows the compiler to streamline performance if the collection never needs to be altered.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf8 \cb1 3-
\f6 \cf4 \cb5 In swift 
\b sets
\b0  are used to store same type of distinct values in unordered manner. We can use 
\b sets
\b0  instead of 
\b arrays
\b0  in case if we want to store only distinct values and we are not concerned about the order of items
\f0\fs34 \cf8 \cb1 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0
\b\fs48 \cf8 Properties
\b0\fs34 \
1-
\fs36 Property observer 
\fs34 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0
\fs42 \cf0 \cb5 \kerning1\expnd0\expndtw0 \
      
\fs24 \expnd0\expndtw0\kerning0
You use didSet to execute code after the property value has changed,\cb1 \kerning1\expnd0\expndtw0 also didst gives me access to the old value\expnd0\expndtw0\kerning0
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf0 \cb5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
You use willSet to execute code before the property value changes\
\ls4\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 -Property observers are declared as a variable and not as constants because it is only a mutable property that can be tracked by property observers. Hence, property observers are declared with 
\b var
\b0  and not the 
\b let 
\b0 keyword.\
\
-property observers cannot be used on 
\b lazy variable
\b0  because 
\b lazy variable
\b0  get properly initialised and assigned to memory only when they are called in your program\cb1 \
\pard\pardeftab720\partightenfactor0
\cf0 \cb5 That defeats the purpose of a 
\b property observers
\b0  because a property with observers on it need to have initial value.
\b  This will enable it track changes whenever they is change in value of the property
\b0 .\
\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 -The need for 
\b property observers
\b0  arises when you have to keep a track on a property to determine when the value changes in order to perform some logic. So, instead of having some functions that checks the value of the property to perform some action, you can abstract that into the 
\b willSet 
\b0 and
\b  
\b0 have it perform the logic when the value is set to the value you want\
\
https://medium.com/@micosmin/swift-property-observers-da8525681b42\
\pard\tx566\pardeftab720\partightenfactor0

\fs36 \cf0 2- Computes properties\
\
\pard\tx566\pardeftab720\partightenfactor0

\fs24 \cf0 - there are important things which are useful to know about \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0
\fs42 \cf0 \kerning1\expnd0\expndtw0 		
\fs24 \expnd0\expndtw0\kerning0
Think of them as pieces of code which will calculate a value every time you call them\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \cb5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Computed properties are always variables (never constants)\cb1 \
\ls5\ilvl0\cb5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
These type of properties can be used in or outside classes, structs, enums\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
1- it doesn\'92t need to assign value instead open a bracket after declaration and start working\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
2- var x = 10 var y = 20   var extproperty: Int \{ return x+y\}\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
once the computed property is called the getter gets executed and the variable is assigned the result   and please note you don\'92t need to write get as long as you don\'92t implement set\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf0 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
3- A getter just allows you to read data from the computed property when you call it and to assign value to a computed property you use the set keyword \
		when you assign  value to the compute property you are calling the setter so you can think in computed property with setter as a function take a parameter\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
\
\ls5\ilvl0\kerning1\expnd0\expndtw0 		https://medium.com/@micosmin/swift-computed-properties-2a8fd9f88d6\
\pard\tx566\pardeftab720\partightenfactor0
\cf0 \expnd0\expndtw0\kerning0
______________________________________________________________________________\
\
\pard\tx566\pardeftab720\partightenfactor0

\b\fs36 \cf0 Closure\

\fs24 \
1- 
\b0 \cf2 Said differently, a closure is a block of code that you can assign to a variable. You can then pass it around in your code, for instance to another function. The function then 
\i calls
\i0  the closure and executes its code, as if the closure is an ordinary function.
\b\fs36 \cf0 \
\

\f7\fs24 Important::\'93The
\f4  
\f7 difference
\f4  
\f7 between
\f4  
\f7 a
\f4  
\f7 closure
\f4  
\f7 and
\f4  
\f7 regular
\f4  
\f7 source
\f4  
\f7 code
\f4  
\f7 is
\f4  
\f7 that
\f4  
\f7 the
\f4  
\f7 code
\f4  
\f7 from
\f4  
\f7 the
\f4  
\f7 closure
\f4  
\f7 does
\f4  
\f7 not
\f4  
\f7 get
\f4  
\f7 performed
\f4  
\f7 right
\f4  
\f7 away
\f4 . 
\f7 Instead,
\f4  
\f7 it
\f4  
\f7 is
\f4  
\f7 stored
\f4  
\f7 in
\f4  
\f7 a
\f4  
\f7 \'93closure
\f4  
\f7 object\'94
\f4  
\f7 and
\f4  
\f7 can
\f4  
\f7 be
\f4  
\f7 performed
\f4  
\f7 at
\f4  
\f7 a
\f4  
\f7 later
\f4  
\f7 point,
\f4  
\f7 even
\f4  
\f7 more
\f4  
\f7 than
\f4  
\f7 once
\f4 .
\f7 \'94
\f4 \
\

\f7 -\'93Closures
\f4  
\f7 are
\f4  
\f7 useful
\f4  
\f7 for
\f4  
\f7 other
\f4  
\f7 things
\f4  
\f7 too,
\f4  
\f7 such
\f4  
\f7 as
\f4  
\f7 initializing
\f4  
\f7 objects
\f4  
\f7 and
\f4  
\f7 lazy
\f4  
\f7 loading\'94
\f4 \
\

\f7 -\'93The
\f4  
\f7 above
\f4  
\f7 somewhat
\f4  
\f7 negates
\f4  
\f7 one
\f4  
\f7 of
\f4  
\f7 the
\f4  
\f7 prime
\f4  
\f7 benefits
\f4  
\f7 of
\f4  
\f7 closures
\f4  
\f7 \'97
\f4  
\f7 keeping
\f4  
\f7 all
\f4  
\f7 the
\f4  
\f7 code
\f4  
\f7 in
\f4  
\f7 the
\f4  
\f7 same
\f4  
\f7 place
\f4  
\f7 \'97
\f4  
\f7 but
\f4  
\f7 there
\f4  
\f7 are
\f4  
\f7 situations
\f4  
\f7 where
\f4  
\f7 this
\f4  
\f7 is
\f4  
\f7 quite
\f4  
\f7 useful
\f4  
\f7 when
\f4  
\f7 the
\f4  
\f7 method
\f4  
\f7 acts
\f4  
\f7 as
\f4  
\f7 a
\f4  
\f7 \'93mini\'94
\f4  
\f7 delegate
\f4\fs28 .\

\fs36 \

\f0\fs24 -
\b0 \cf2 As you know, variables store information in your Swift code, and functions can execute tasks. With closures, you put a function\'92s code in a variable, pass it around, and execute its code somewhere else.
\fs36 \

\b \cf0 \

\fs24 2- 
\b0 \cf2 \kerning1\expnd0\expndtw0 	\'95	\expnd0\expndtw0\kerning0
A closure is a block of code that you can pass around in your code\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Closures can have zero, one or more parameters\
\ls6\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Every closure has a type, including any closure parameters
\b \cf0 \
\pard\tx566\pardeftab720\partightenfactor0

\fs36 \cf0 \

\fs24 3- 
\b0 \cf2 \kerning1\expnd0\expndtw0 	1	\expnd0\expndtw0\kerning0
Capturing only works one way. The closure captures the scope it is defined in, but code \'93outside\'94 a closure doesn\'92t have access to values \'93inside\'94 the closure.\

\b\fs36 \cf0 \

\fs24 4- 
\b0 \cf2 \kerning1\expnd0\expndtw0 	\'95	\expnd0\expndtw0\kerning0
A closure can capture its surrounding scope, making variables and constants from that scope      \
               accessible within the closure\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Variables and constants are captured with a strong reference by default, which can cause a strong reference cycle\
\ls7\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You can break the strong reference cycle with a capture list, by explicitly marking captured values as 
\f1 \cf11 weak
\f0 \cf2  and 
\f1 \cf11 unowned
\f0\b\fs36 \cf0 \
\pard\tx566\pardeftab720\partightenfactor0

\b0\fs24 \cf0 \
\pard\pardeftab720\partightenfactor0
\cf2 . The completion handler is executed when the lengthy task is completed.\
This closure is a 
\i completion handler
\i0 . It\'92s executed when the request to download the image has finished. In other words: you can use a closure to determine what happens when a particular action is completed (hence \'93completion handler\'94).\
\
________________________________________________________________________\
\

\b\fs36 Classes and structs \
\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs24 \cf0 \cb12 enum
\f0 \cb5  or a 
\f1 \cb12 struct,dictionary,array 
\f0 \cb5 it is a value type and a 
\f1 \cb12 Class,closure,functions
\f0 \cb5  are a reference type.
\b \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0
\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Structs, such as 
\f1 Int
\f0 , 
\f1 String
\f0 , 
\f1 Double
\f0  and 
\f1 Bool
\f0 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Arrays, dictionaries and sets\
\ls8\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Enumerations and tuples\
\pard\tx566\pardeftab720\partightenfactor0

\b\fs36 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 -
\f7 when
\f4  
\f7 should
\f4  
\f7 use
\f4  
\f7 struct
\f4  
\f7 and
\f4  
\f7 class
\f4 \
	
\f7 struct
\f4 \
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 	
\b0\fs24 1- \shad\shadx0\shady20\shadr20\shado0 \shadc0 Use a value type when comparing instance data with == makes sense.\

\b\fs36 \shad0 	
\b0\fs24 2-\shad\shadx0\shady20\shadr20\shado0 \shadc0 Use a value type when the code will use this data across multiple threads
\fs36 .\

\b \shad0 	class\
	
\b0\fs24 1
\b\fs36 -
\b0\fs24 \shad\shadx0\shady20\shadr20\shado0 \shadc0 Use a reference type when comparing instance identity with === makes sense
\fs36 .\
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 	2-Use a reference type when you want to create a shared, mutable state.\

\fs36 \
\pard\pardeftab720\partightenfactor0

\b \cf2 \shad0 \
\pard\pardeftab720\partightenfactor0

\b0\fs24 \cf0 \cb5 1- we should be using struct because they greatly reduce complexity and fallback to Classes if the Struct becomes very large or requires inheritance
\fs42 .\
\

\fs24 2-Even though struct and enum don\'92t support inheritance, they are great for protocol-oriented programming. A subclass inherits all the required and unwanted functionalities from the superclass and is a bad programming practice. Better to use a struct with protocol-oriented programming concept which fixes the above-said issue\
\
3-Class does support Inheritance. Class is a reference type and is stored in the heap part of memory which makes a class comparatively slower than a struct in terms of performance. Unlike a class, a struct is created on the stack. So, it is faster to instantiate (and destroy) a struct than a class\
\pard\pardeftab720\partightenfactor0

\b \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\b0 \cf2 4- Classes support a few more capabilities that structs don\'92t have:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Classes can inherit from another class, like you inherit from 
\f1 UIViewController
\f0  to create your own view controller subclass\
\ls9\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Classes can be deinitialized, i.e. you can call a function before the class is destroyed\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf13 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://learnappmaking.com/swift-value-types-vs-reference-types/"}}{\fldrslt \expnd0\expndtw0\kerning0
Classes are reference types and structs are value types}}
\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 Pass by values , pass by reference\
\

\f7 1-
\f4  
\f3\b0\fs24 \cf0 \cb5 1-Class
\f4  
\f3 is
\f4  
\f3 a
\f4  
\f3 reference
\f4  
\f3 type
\f4 . 
\f3 That
\f4  
\f3 means
\f4  
\f3 the
\f4  
\f3 variable
\f4  
\f3 of
\f4  
\f3 a
\f4  
\f3 class
\f4  
\f3 type
\f4  
\f3 does
\f4  
\f3 not
\f4  
\f3 store
\f4  
\f3 an
\f4  
\f3 actual
\f4  
\f3 instance,
\f4  
\f3 but
\f4  
\f3 a
\f4  
\f3 reference
\f4  
\f3 to
\f4  
\f3 a
\f4  
\f3 location
\f4  
\f3 in
\f4  
\f3 the
\f4  
\f3 memory(heap)
\f4  
\f3 that
\f4  
\f3 stores
\f4  
\f3 the
\f4  
\f3 instance
\f4\fs42 .\cb1 \

\f0\b\fs28 \cf2 \

\f7 2-
\f3\b0\fs24 \cf0 \cb5 For reference types, the reference is stored on the stack while the object it refers to is stored on the heap. For value types, the object itself is stored on the stack.\cb1 \

\f7\b\fs28 \cf2 \
3-
\f3\b0\fs24 \cf0 \cb5 Since reference types are always stored on the heap, anything they contain (even value types) is also stored on the heap. For ex: If a class has a struct instance inside it, then the struct instance will be stored in the heap along with the class instance.
\f0\i \cb1 \

\i0\b\fs28 \cf2 \
4- 
\b0 mutability
\b  \
\pard\pardeftab720\partightenfactor0

\b0\fs24 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 For reference types, 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 let
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  means the reference must remain constant. In other words, you can\'92t change the instance the constant references, but you can mutate the instance itself.\
\
For value types, 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 let
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  means the instance must remain constant. No properties of the instance will ever change, regardless of whether the property is declared with 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 let
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0  or 
\f1 \cb3 \shad\shadx0\shady20\shadr20\shado0 \shadc0 var
\f0 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 .
\b\fs28 \shad0 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 Stack and heap \

\b0\fs24 1- A stack is the data structure or abstract data type which stores the value assigned to the variables or some object at compile time.\
Eg. int a[4]=\{1,3,4,5\}; //Here the array is stored in the stack.\
\
While a heap stores the data or values assigned at run time(At time of execution).\
Eg. int a=new int[20]; //Here this array is assigned the value at run time,and thus it will be stored in the heap
\b\fs28 \
\

\fs36 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 2- \cf0 \cb5 \kerning1\expnd0\expndtw0 	\expnd0\expndtw0\kerning0
Value Type
\b0 \uc0\u8202 \'97\u8202 Get Stored on Stack Memory.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0
\b \cf0 \cb5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Reference Type
\b0 \uc0\u8202 \'97\u8202 Get Stored on Managed Heap Memor
\b \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
3- 
\b0 \cf0 \cb5 the stack stores that variable and is destroyed when the function exits 
\f8\fs26\fsmilli13333 \cb1 and the program stops) these variables are popped off of the stack
\f0\fs24 \cb5 \
\
4-the stack is very well organized, it is very efficient and fast.\
	-
\fs20 \cf2 \cb1 Variables allocated on the stack are stored directly to the memory and access to this memory is very fast, and it's allocation is dealt with when the program is compiled.
\fs24 \cf0 \cb5 \
5-the execution of all those functions remains suspended until the very last function returns its value. The stack is always reserved in a LIFO order\
\pard\pardeftab720\partightenfactor0

\fs42 \cf0 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 6- data items on stack are allocated by CPU, therefore memory will be managed efficiently there will be no memory leaks 
\fs42 \
Heap\
1-
\fs24 The heap doesn\'92t automatically destroy its object like the stack does. External work has to be done to do this. ARC does the job in apple devicesReference count is tracked by the ARC and when it becomes zero, the object is deallocated. Hence, the overall process (allocation\'a0, tracking the references and deallocation) is slower compared to stack. So value types are faster than reference types.
\b \cf2 \cb1 \
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 2-
\b0 Element of the heap have no dependencies with each other and can always be 
\i accessed randomly 
\i0 at any time. You can allocate a block at any time and free it at any time. This makes it much more complex to keep track of which parts of the heap are allocated or free at any given time.
\b \
\
3-
\b0 the 
\i heap
\i0  have their memory allocated at run time and accessing this memory is a bit slower, but the heap size is only limited by the size of virtual memory.
\fs30 \
\pard\pardeftab720\partightenfactor0

\b\fs36 \cf2 \

\b0\fs24 4-data items allocated  on heap it\'92s programmer\'92s responsibility to allocate memory and free it when it\'92s no longer used , if memory is not well managed there may be memory leaks \

\b\fs36 \
\pard\pardeftab720\partightenfactor0

\fs30 \cf2 When to use stack and when to use heap?
\b0 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 You can use the stack if you know exactly how much data you need to allocate before compile time and it is not too big. You can use heap if you don't know exactly how much data you will need at runtime or if you need to allocate a lot of data.\
\
___________________________________________________________________________\
\

\b\fs36 Multithreading
\fs24 \
\

\b0 1- what is multi threading\
	Multithreading allows the processor to create concurrent 
\i threads
\i0  it can switch between, it allows a CPU to rapidly switch between multiple tasks in such a way that it appears as if the tasks are executed simultaneously.\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf2 \
\
\
\
\
_____________________________________________________________________________\
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 ARC
\fs24 \
\
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \cb5 ARC allocates memory that holds information about the Type and Value it holds to. Whenever we assign a class instance to a constant or variable, that particluar constant or variable makes a 
\f1 \cb12 strong
\f0 \cb5  reference to the instance and does not allow it to be deallocated as long as that strong reference exists, 
\fs28 Once, all the active references are removed, ARC frees up the memory by removing the instance.\
\
\pard\pardeftab720\partightenfactor0

\fs26 \cf14 \cb1 ARC actually helps store references into memory and helps clean up when it is not being used
\fs34 .
\fs28 \cf0 \cb5 \
1- 
\f1\fs32 \cb12 emp1 =  
\f9\b Employee
\f1\b0 (employeeName: "John Appleseed")\cb1 \
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf2 \
\pard\pardeftab720\partightenfactor0

\b0 \cf0 \cb5 Now that 
\b Employee
\b0  instance is assigned to the 
\f9\b \cb12 emp1.
\f0\b0 \cb5  There is a strong reference from 
\f9\b \cb12 emp1
\f0\b0 \cb5  to the new 
\b Employee
\b0  instance and ARC ensures that this 
\b Employee
\b0  is kept in memory and not deallocated. 
\b Retain Count
\b0  has increased by 
\b 1
\b0 .
\b \cf2 \cb1 \
\
emp1 = nil \
\pard\pardeftab720\partightenfactor0

\b0 \cf2 Once we do that the strong reference wouldn\'92t be exist , ARC is now free to remove instance from the memory\
\
2- \cf0 \cb5 There could be a scenario where two class instance holds a strong Reference to each other and there is no way for the system to deallocate them this is know as 
\b strong Refernce cycle\
\
- 
\b0 so swift provides two ways of resoling these strong reference Cycle 
\b weak and unowned reference\
	weak reference 
\b0 is a reference that does not keep a strong hold on the instance it refers to, and      \
           so does not stop ARC from disposing of the referenced instance
\fs42 .\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 - \cf14 \cb1 With the property labelled as 
\f5 \cf15 \cb9 weak
\f0 \cf14 \cb1 , it will not increment the reference count\
\pard\pardeftab720\partightenfactor0

\fs42 \cf0 \cb5 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 	
\b Unowned 
\b0 \cf14 \cb1 An unowned reference is very similar to a weak reference that it can be used to resolve the \
                           strong reference cycle. The big difference is that an unowned reference always have a value\
                         . ARC will not set unowned reference\'92s value to 
\f5 \cf15 \cb9 nil
\f0 \cf14 \cb1 . In other words, the reference is declared  \
                            as non-optional types.\
\
https://www.appcoda.com/memory-management-swift/\
https://medium.com/swift-india/swift-4-0-automatic-reference-counting-arc-part-1-d21d3ccf12b5\
https://medium.com/swift-india/swift-4-0-automatic-reference-counting-arc-part-2-848d42cf5819\
\
______________________________________________________________________________________\
\pard\pardeftab720\partightenfactor0

\b\fs48 \cf14 Protocol
\b0\fs24 \
\
1- 
\b\fs28 Defination
\b0\fs24 \
-\cf2 A protocol defines a blueprint of methods, properties, and other requirements that suit a particular task or 	\
    piece of functionality.\
\pard\pardeftab720\partightenfactor0
\cf14 	- protocols are a good way to define a set of required functionality that other types can adopt\
\
2- 
\b\fs28 uses
\b0\fs24  \
	A- Abstraction\
	B- Extension\
	c- multi inheritance\
\
- In some situation uses the subclassing is not the right way it doesn\'92t solve every single problem that we come across when building apps. So protocols can replace subclassing in some cases\
\
- and if we ask Why would we use protocols in a situation , as opposed to subclassing?\
The answer is called multiple inheritance. When you define a class, it can have either 0 or 1 superclasses. You can\'92t define a class with two superclasses, inheriting functionality from both. Protocols don\'92t have this constraint. An object can conform to as many protocols as you want, inheriting default functionality from all of them. Additionally, classes can selectively override functionality they inherit from protocols, just like with classes. 
\fs34 \
\

\fs24 - Through the power of extensions, we can define protocols and then modify existing Swift Standard Library types to conform to them, making them even more powerful than they already are. , at the end extensions in swift allows us to extend types that we may or may not have defined ourselves
\fs34 \
\

\fs24 -So why is Swift considered a protocol oriented language when Objective C isn\'92t? The answer lies in the protocol extension\
\pard\pardeftab720\partightenfactor0

\fs34 \cf14 \
Syntacis notes\
\pard\pardeftab720\partightenfactor0

\fs24 \cf14 1- 
\fs42 \cf0 \cb5 \kerning1\expnd0\expndtw0 		\expnd0\expndtw0\kerning0
Property requirements are always declared as variable properties, prefixed with the 
\f1\fs32 \cb12 var
\f0\fs42 \cb5  keyword.\cb1 \
\pard\pardeftab720\partightenfactor0

\fs34 \cf14 \
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0

\b\fs24 \cf14 Type Casting\
\
1- type casting is:  
\b0 \cf2 With type casting you 
\i treat
\i0  an object as one of another type. 
\b \cf14 \
\
\pard\pardeftab720\partightenfactor0

\b0 \cf2 With type casting you can 
\i treat
\i0  an instance of a class as an instance of another superclass or subclass within its class hierarchy.\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls11\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
With type casting you can 
\i treat
\i0  an instance of a class as an instance of another superclass or subclass within its class hierarchy.\
\ls11\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
You can downcast and upcast between subclasses and superclasses in the same hierarchy, but not sideways between subclasses of the same superclass\
\pard\tx566\pardeftab720\partightenfactor0

\b \cf14 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0
\b0 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When you upcast, you cast from a subclass to a superclass (upwards)\
\ls12\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When you downcast, you cast from a superclass to a subclass (downwards)
\f2\fs26 \cf16 \
\pard\tx566\pardeftab720\partightenfactor0

\f0\b\fs24 \cf14 \
\pard\pardeftab720\partightenfactor0
\cf14 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\pard\pardeftab720\partightenfactor0

\fs36 \cf14 GCD\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf14 Start of story
\b0 ::\'93\'93\'93The CPU (Central Processing Unit) in older iPhone and iPad models has one core, which means it can only do one thing at a time. More recent models have a CPU with two cores, which allows for a whopping two computations to happen simultaneously\'94\
\
\pard\pardeftab720\partightenfactor0

\b\fs36 \cf14 - 
\fs24 \'93Each process contains one or more threads. each process is given a bit of CPU time to do its work\'94,, \'93An app can have multiple threads and the CPU switches between them\'94\
\
\'93the main thread is responsible for handling user interface events and also for drawing the UI. Most of your app\'92s activities take place on the main thread, \'93Whenever the user taps a button in your app, it is the main thread that performs your action method.\'94\
\'93Because it\'92s so important, you should be careful not to hold up, or \'93block\'94, the main thread.\'94\

\fs36 \
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf14 - \'93In short, GCD has a number of queues with different priorities. To perform a job in the background, you put the job in a closure and then pass that closure to a queue and forget about it. It\'92s as simple as that.
\fs36 \
\

\fs24 \
1- 
\f10\b0\fs22 \cf17 \cb5 The Grand Central Dispatch (GCD, or just Dispatch) framework is based on the underlying thread pool design pattern
\f0\b\fs24 \cf14 \cb1 \
\
\
2-  
\f10\b0\fs22 \cf17 \cb5 Creating threads on the run is an expensive task so GCD organizes tasks into specific queues, \
	-and later on the tasks waiting on these queues are going to be executed on a proper and available thread from  	\
                 the pool.
\f0\b\fs24 \cf14 \cb1 \
	-
\f10\b0\fs22 \cf17 \cb5 This approach leads to great performance and low execution latency
\fs44 .\
\pard\pardeftab720\partightenfactor0

\fs24 \cf17 3-
\f0 \cf14 \cb1 Apple provides two ways to do multitasking: The Grand Central Dispatch (GCD) and NSOperationQueue frameworks\
\
4-there\'92s one rule that should be always respected: The main thread must be always remain free so it serves the user interface and user interactions.\
\
5-the dominating phrase in GCD is the dispatch queue. A queue is actually a block of code that can be executed synchronously or asynchronously, either on the main or on a background thread
\fs34 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf14 -Queues are following the FIFO pattern\
-say that a queue can be either serial or concurrent.\
\
\pard\tx4999\pardeftab720\partightenfactor0

\fs28 \cf14 3-
\b QoS
\b0  :That information regarding the importance and priority of the tasks is called in GCD Quality of Service (QoS)\
\pard\pardeftab720\partightenfactor0

\fs24 \cf14 -\cf0 \cb5 There are some tasks which are more important than others, so we have to make sure that they will be executed first. We can do so by assigning priority to them.\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf0 \cb12 .userInteractive\cb1 \
\cb12 .userInitiated\cb1 \
\cb12 .default\cb1 \
\cb12 .utility\cb1 \
\cb12 .background\cb1 \
\cb12 .unspecified
\f0\fs24 \cf14 \cb1 \
\pard\pardeftab720\partightenfactor0

\f10 \cf17 \cb5 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf17 4
\fs44 -
\f0\fs26 \cf2 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 GCD provides three main types of queues
\fs34 \shad\shadx0\shady20\shadr20\shado0 \shadc0 :\
	
\b\fs24 \kerning1\expnd0\expndtw0 \shad0 	1	\expnd0\expndtw0\kerning0
\shad\shadx0\shady20\shadr20\shado0 \shadc0 Main queue
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 : runs on the main thread and is a serial queue.\
		\cf0 \cb5 \shad0 The main queue allows us to execute tasks on the main/UI thread. Tasks related to UI updates  \
                       can be run on the main queue\cf2 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 \shad0 {\listtext	1	}\expnd0\expndtw0\kerning0
\shad\shadx0\shady20\shadr20\shado0 \shadc0 Global queues
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 : concurrent queues that are shared by the whole system. There are four such queues with different priorities : high, default, low, and background. The background priority queue has the lowest priority and is throttled in any I/O activity to minimize negative system impact.\
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0
\b \cf2 \kerning1\expnd0\expndtw0 \shad0 {\listtext	1	}\expnd0\expndtw0\kerning0
\shad\shadx0\shady20\shadr20\shado0 \shadc0 Custom queues 
\b0 \shad\shadx0\shady20\shadr20\shado0 \shadc0 queues that you create which can be serial or concurrent\
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
-\cf0 \cb5 \shad0 OS provides us 
\b global
\b0  dispatch queue for executing the task on a background thread, and 
\b main 
\b0 dispatch queue for executing a task on the main/UI thread.\cb1 \
\cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
\pard\tx566\pardeftab720\partightenfactor0

\b\fs28 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 5- synchronous, asynchronous\
\pard\tx566\pardeftab720\partightenfactor0

\b0\fs24 \cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
	-
\b\fs28 \shad\shadx0\shady20\shadr20\shado0 \shadc0 synchronous: 
\b0\fs24 \shad\shadx0\shady20\shadr20\shado0 \shadc0  function returns control to the caller after the task completes\
\pard\pardeftab720\partightenfactor0

\i \cf0 \cb5 \shad0 .sync
\i0  method on queue dispatch task for execution and won\'92t return until block completes its execution. Hence the code written after the block won\'92t get executed until the execution of block is completed.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb1 \shad\shadx0\shady20\shadr20\shado0 \shadc0 \
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \shad\shadx0\shady20\shadr20\shado0 \shadc0 	-An asynchronous function returns immediately, ordering the task to start\
            but not waiting for it to complete\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
TableView\
\
1-\'93First off, UITableViewController is a subclass of UIViewController \'97 it can do everything that a regular view controller can. However, it is optimized for use with table views and has some cool extra features.\
\
For example, when a table cell contains a text field, tapping that text field will bring up the on-screen keyboard. UITableViewController automatically scrolls the cells out of the way of the keyboard so you can always see what you\'92re typing\'94\
\
2- \'93You don\'92t get that behavior for free with a plain UIViewController \'97 if you want that feature, you\'92ll have to program it yourself\'94\
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \shad0 The most important functions for 
\f1\fs28 UITableViewDataSource
\f0\fs36  are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls15\ilvl0
\f1\fs28 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
numberOfSections(\cf11 in\cf2 :)
\f0\fs36 \
\ls15\ilvl0
\f1\fs28 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
tableView(_:numberOfRowsInSection:)
\f0\fs36 \
\ls15\ilvl0
\f1\fs28 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
tableView(_:cellForRowAt:)
\f0\fs36 \
\pard\pardeftab720\partightenfactor0
\cf2 Other relevant functions for 
\f1\fs28 UITableViewDelegate
\f0\fs36  are:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0
\f1\fs28 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
tableView(_:didSelectRowAt:)\
\pard\tx566\pardeftab720\partightenfactor0

\f0\fs36 \cf18 	
\fs24 \'93is one of the table view delegate methods and gets called whenever 	the user taps on a ce
\fs36 ll\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0
\f1\fs28 \cf2 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
tableView(\cf19 _\cf2 :willDisplay:\cf11 for\cf2 :)\
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f0\fs36 \cf2 Every time a cell that wasn\'92t on screen before appears, the function 
\f1\fs28 tableView(_:cellForRowAt:)
\f0\fs36  is called, and a new line appears in the 
\i Console
\i0 .\
\
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 \'93the table view sends a numberOfRowsInSection message to find out how many data rows there are.\
And when the table view needs to draw a particular row on the screen it sends a cellForRowAt message to ask the data source for a cell.\'94
\fs36 \
\
3-\'93There are two styles of tables: \'93plain\'94 and \'93grouped\'94.\'94\
\
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \'93The plain style is used for rows that all represent something similar, such as contacts in an address book where each row contains the name of one person.\
\
The grouped style is used when the items in the list can be organized by a particular attribute, like book categories for a list of books
\fs36 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 T\'93he grouped style table could also be used to show related information 
\fs36 \'94\
\
4- Cells and rows\
\
ROWS\
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 	-\'93The data for a table comes in the form of rows.\'94\
\'93You can potentially have many rows (even tens of thousands) but that kind of design isn\'92t recommended \'93Most users will find it incredibly annoying to scroll through ten thousand rows to find the one they want. And who can blame them?\'94\
So we used cells \
\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 CELLS\
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 	- \'93A cell is a view that shows a row of data that happens to be visible at that moment. If your table can show 10 rows at a time on the screen, then it only has 10 cells, even though there may be hundreds of rows of actual data.
\fs36 \'94\
\pard\pardeftab720\partightenfactor0

\fs28 \cf2 \'93Whenever a row scrolls off the screen and becomes invisible, its cell will be re-used for a new row that becomes visible\'94
\fs36 \
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \'93Remember that the cell is just the visual representation of the row, not the actual data. To add data to the table, you have to write some co\'94\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 \
	 reuse identifier on the cell: 
\fs24 This is an internal name that the table view uses to find free cells to reuse when rows scroll off the screen and new rows must become visible
\fs36 .\
\
\pard\pardeftab720\partightenfactor0

\fs26 \cf2 \'93Reuse identifiers are also important for when you want to display different types of cells in the same table for example:\
\'93could have an image and a label and another could have a label and a button. You would give each cell type its own identifier, so the table view can assign the right cell for a given row type\'94
\fs36 \
\
\pard\pardeftab720\partightenfactor0

\f3\fs26 \cf2 5-
\f4  
\f3 \'93Usually,
\f4  
\f3 components
\f4  
\f3 will
\f4  
\f3 have
\f4  
\f3 just
\f4  
\f3 one
\f4  
\f3 delegate
\f4 . 
\f3 But
\f4  
\f3 the
\f4  
\f3 table
\f4  
\f3 view
\f4  
\f3 splits
\f4  
\f3 up
\f4  
\f3 its
\f4  
\f3 delegate
\f4  
\f3 duties
\f4  
\f3 into
\f4  
\f3 two
\f4  
\f3 separate
\f4  
\f3 helpers:
\f4  
\f3 the
\f4  
\f3 UITableViewDataSource
\f4  
\f3 for
\f4  
\f3 putting
\f4  
\f3 rows
\f4  
\f3 into
\f4  
\f3 the
\f4  
\f3 table,
\f4  
\f3 and
\f4  
\f3 the
\f4  
\f3 UITableViewDelegate
\f4  
\f3 for
\f4  
\f3 handling
\f4  
\f3 taps
\f4  
\f3 on
\f4  
\f3 the
\f4  
\f3 rows
\f4  
\f3 and
\f4  
\f3 several
\f4  
\f3 other
\f4  
\f3 tasks
\f4 .
\f3 \'94
\f4\fs36 \
\

\f0  
\f1\fs28 ____________________________________________________________________\
\pard\pardeftab720\partightenfactor0

\fs36 \cf2 LayOut\
\
\pard\pardeftab720\partightenfactor0

\f3\fs32 \cf2 \cb5 1-
\f4  
\f2 a
\fs24 uto layout:: is a constraint-based layout system. It allows developers to create an adaptive UI that responds appropriately to changes in screen size and device orientation. Okay, it sounds good. But what does the term "constraint-based layout" mean
\fs32 ?\
\

\fs26 2- there are 5 button in the right bottom Xcode \'97> they are responsible for auto layout \
\

\fs24 	
\b \kerning1\expnd0\expndtw0 	\'95	\expnd0\expndtw0\kerning0
Align
\b0  \'96 Create alignment constraints, such as aligning the left edges of two views.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0
\b \cf2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Add new constraints
\b0  \'96 Create spacing constraints, such as defining the width of a UI control.\
\pard\tx566\pardeftab720\partightenfactor0
\cf2 \cb1 		\'93This button lets you define relationships, called constraints, between the currently selected view and \
           other views in the scene\'94\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0
\b \cf2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Resolve auto layout issues
\b0  \'96 Resolve layout issues.\cb1 \
\ls19\ilvl0
\b \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Stack
\b0  \'96 Embed views into a stack view. We will further discuss it in the next chapter.\cb1 \
\ls19\ilvl0
\b \cb5 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Update frames
\b0  - Update the frame's position and size in reference to the given layout constraints
\fs32 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\
Xcode provides two ways to define auto layout constraints:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls20\ilvl0\cf2 \cb5 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Auto layout bar\cb1 \
\ls20\ilvl0\cb5 \kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Control-drag
\f1\fs36 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0

\f11\fs26 \cf2 1-With Auto Layout you create constraints that determine how big the views are and where they go on the screen\'94\

\fs36 \
\

\fs24 2- \'93he reason your new constraints are red is that Auto Layout does not know how large this container view should be; you\'92ve only added constraints for the view\'92s position, not its size
\fs36 \'94\
\
2-
\fs24 \'93At this point, the container view may still have orange lines indicating that the constraints are fine but that the view's frame is not in the proper position.\'94
\fs36 \
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \
\
\
\
\
\
\
\
\
\
\
\
\
}