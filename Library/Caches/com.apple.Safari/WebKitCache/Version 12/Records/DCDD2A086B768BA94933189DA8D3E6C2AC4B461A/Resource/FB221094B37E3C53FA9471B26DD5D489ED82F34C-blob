WEBVTT

00:00.570 --> 00:06.120
今私たちがやるべき最初のことは、端末を開き、端末の中にデスクトップに移動することです。

00:06.120 --> 00:08.000
&nbsp;

00:08.010 --> 00:13.650
&nbsp;

00:13.980 --> 00:18.390
&nbsp;

00:18.390 --> 00:20.790
だからコマンドラインに慣れておらず、コマンドラインでMarchalを見たことがないなら、今度はそれを見てみることをお勧めします。これは、たくさんのコマンドを使ってディレクトリを作成するためです周囲をナビゲートします。

00:20.790 --> 00:25.290
だからあなたがまだ慣れていないなら、それを見てみるのはいい時期です。

00:26.010 --> 00:33.600
&nbsp;

00:33.600 --> 00:43.920
だから最初にやるべきことは私がデスクトップにCDを置くことです。ここではstoryという新しいディレクトリを作成します。次に、このストーリーディレクトリにCDを、lsを使用してshoyuに行きます。

00:43.920 --> 00:45.870
それは完全に空であることがわかります。

00:45.990 --> 00:50.420
同様にファインダー内でも同じことを私は見ることができます。

00:50.430 --> 00:54.600
テキストファイルを作成してみましょう。

00:54.660 --> 01:01.590
&nbsp;

01:01.590 --> 01:09.690
&nbsp;

01:09.750 --> 01:11.880
だから私は第1章のドットテキストと呼ばれるファイルを作成するためにタッチを使用し、次に第1章のテキストを開きます。これを行うには、単純に開いて、それをテキストのデフォルトアプリケーションの中に開きますMacで。

01:12.120 --> 01:18.130
あるいは、端末内のテキスト（例：Vin）を使用することもできます。

01:18.210 --> 01:21.770
今これは本当にこれに精通している人々のためだけです。

01:21.780 --> 01:24.050
それで、あなたが使うことを決めるのはあなた次第です。

01:24.090 --> 01:30.180
しかし、ターミナルベースのエディタの使い方に慣れていない場合は、openコマンドを使用してtexteditを使用することをお勧めします。

01:30.180 --> 01:33.920
&nbsp;

01:33.930 --> 01:39.110
さあ、第1章を開き、Jawi OKの中に何かを書きましょう。

01:42.990 --> 01:43.350
&nbsp;

01:43.360 --> 01:45.270
それが私の傑作です。

01:45.390 --> 01:49.440
私は先に進んでsaveを打つつもりで、私はtexteditをやめるつもりです。

01:49.570 --> 01:53.190
それで私たちの最初の章が完成しました。

01:53.380 --> 02:01.100
では、ローカルリポジトリを作成し、これらのファイル変更の一部の追跡を開始しましょう。

02:01.450 --> 02:06.350
だから、初期化するには簡単にそれを書いてください。

02:06.340 --> 02:12.490
そして、それが初期化され、空であることがわかるように、ストーリーディレクトリ内のリポジトリを取得します。

02:12.490 --> 02:17.230
今あなたがファインダー内を見ているなら、実際にこのドットは全く見えません。

02:17.320 --> 02:18.900
しかし、我々が以前に学んだように。

02:18.970 --> 02:20.720
LS A.を使用する場合

02:20.920 --> 02:26.620
すべての隠しファイルを見ることができ、そこにDoggetがあることがわかります。変更点を追跡してバージョン管理を行うために、すべての変更を追跡するために使用されます。

02:26.710 --> 02:32.320
&nbsp;

02:32.320 --> 02:38.100
だから私たちは現在ストーリーディレクトリの中にいるので、これを作業ディレクトリと呼ぶこともできます。

02:38.110 --> 02:45.250
だから私はそれを使用する前に、バージョンコントロールについて学ぶために言及したように、独自の用語と言語のいくつかが付属しています。

02:45.340 --> 02:46.570
&nbsp;

02:46.570 --> 02:51.370
だから私は、これらの用語の多くを試して暴露して単純化するつもりです。あなたは同じページにいて、何が起こっているのかをすべて理解することができます。

02:51.370 --> 02:55.440
&nbsp;

02:55.720 --> 03:01.770
だから、現在我々はストーリーディレクトリである作業ディレクトリの中にいる。

03:02.050 --> 03:07.750
そして、ここでは私のファイルの変更を追跡し始めます。

03:07.750 --> 03:15.350
たとえば、第1章のドットテキストの場合、ステージングエリアと呼ばれるファイルにこのファイルを追加する必要があります。

03:15.790 --> 03:23.230
そして、それは基本的に、作業ディレクトリ内のどのファイルをコミットするかを選択して選択できる中間的な場所です。

03:23.230 --> 03:26.270
&nbsp;

03:26.320 --> 03:33.220
あなたのステージングエリア内に現在何があるかを見るには、get

03:33.220 --> 03:39.630
statusコマンドを使うことができます。それは、赤で表示されているトラッキングされていないファイルがあることを示しています。

03:39.630 --> 03:41.080
&nbsp;

03:41.080 --> 03:42.410
それでここに。

03:42.550 --> 03:45.560
しかし、まだステージングエリアにはありません。

03:45.610 --> 03:52.570
ステージング領域に追加して変更を追跡するには、getコマンドを使用する必要があります。

03:52.570 --> 03:53.940
&nbsp;

03:54.020 --> 03:58.930
そして、getを追加して、ファイル名を入力します。

03:58.930 --> 04:01.730
したがって、この場合は第1章altテキストです。

04:01.960 --> 04:08.710
だから先に進んでEnterキーを押すと、ステータスを再度取得しようとすると、そのファイルが新しいファイルとして追加され、現在緑色になっていることがわかります。

04:08.800 --> 04:11.820
&nbsp;

04:11.830 --> 04:16.380
これはステージング領域にあり、コミットする準備ができています。

04:16.390 --> 04:20.260
それでは、バージョン管理下でこれをコミットします。

04:20.260 --> 04:28.480
コマンドはコミットを取得するので、ダッシュとフラグを使用してコミットメッセージを追加します。

04:28.480 --> 04:31.450
したがってコミットメッセージは本当に重要です。

04:31.630 --> 04:38.140
これは、各コミットで行った変更を追跡するのに役立つものです。

04:38.140 --> 04:47.200
したがって、新しいセーブポイントを作成するときは、最後のセーブポイントと現在のセーブポイントの間でどのような変更が行われたかをできるだけ明示的にしたいと考えています。

04:47.230 --> 04:50.380
&nbsp;

04:50.380 --> 04:58.420
最初のコミットでは、最初のコミットのような非常に単純なものを使うことができます。これが私たちの出発点です。

04:58.420 --> 04:59.880
&nbsp;

05:00.100 --> 05:05.920
あるいは、私たちのケースでは実際に第1章を完成させているので、少し具体的にしたいと思っています。

05:05.920 --> 05:07.090
&nbsp;

05:07.090 --> 05:11.180
ですから、第1章を書くことができます。

05:11.200 --> 05:16.540
今あなたが気づくことは、彼らが現在の時制で書かれたメッセージをコミットすることです。

05:16.540 --> 05:17.050
&nbsp;

05:17.260 --> 05:18.600
これがベストプラクティスです。

05:18.610 --> 05:25.210
だからおそらくもっと意味をなさないだろうが、少なくとも私の頭の中では、このセーブポイントとして完成したチャプター1を書いていると思う。

05:25.270 --> 05:28.200
&nbsp;

05:28.240 --> 05:32.680
実際には、現在の時制を常に使用すべきであるという慣例があります。

05:32.680 --> 05:36.910
あなたの変更を今すぐ提出しているように、そうしているようです。

05:37.000 --> 05:44.200
さあ始めてヒットして最初のコミットを行い、Get

05:44.200 --> 05:47.290
logコマンドを使って何をコミットしたかを確認しましょう。

05:47.560 --> 05:53.320
このコミットがこの時点でこの人によって行われたことが分かります。

05:53.540 --> 06:00.720
また、ハッシュもあり、このハッシュはこの特定のコミットを一意に識別します。

06:00.910 --> 06:06.620
最後に、このセーブポイントが何であったかについてのこのコミットメッセージが表示されます。

06:07.870 --> 06:12.310
だから私は先に進んでさらに2つの章を作ります。

06:12.340 --> 06:25.450
だから第2章ドットテキストと第3章ドットテキストを作成しましょう.3つの章があり、これらのテキストファイルのいくつかを変更します。

06:25.720 --> 06:29.640
&nbsp;

06:29.680 --> 06:31.030
&nbsp;

06:41.270 --> 06:43.710
だから、kと言うと、それは第2章です。

06:43.960 --> 06:49.330
そして最後に3章を開き、それを編集してみましょう。

07:00.930 --> 07:01.420
大丈夫。

07:01.450 --> 07:03.720
3つのファイルすべてが変更されました。

07:03.760 --> 07:09.070
&nbsp;

07:09.070 --> 07:14.520
Finderでは、実際には内容がどのようなものであるかを素早く見て、バックグラウンドの背後で何をしているのかを実証することができます。

07:14.800 --> 07:20.860
そこで、この2つの新しいファイルをステージングエリアに読み込んでみましょう。

07:20.860 --> 07:28.180
したがって、再度ステータスを取得すると、作業ディレクトリにのみ存在し、ステージング領域にはまだ入っていない、2つのファイルがトラックされていないことがわかります。

07:28.180 --> 07:31.970
&nbsp;

07:32.290 --> 07:38.630
だから私たちは以前と同じようにそれぞれを単に追加するだけでステージング領域に入れることができます。

07:38.650 --> 07:42.610
追加して第二章の犬タグのようなものを書く。

07:42.630 --> 07:45.430
そしてそれを第3章のドットテキストで行います。

07:45.640 --> 07:51.940
しかし、あなたがかなりのファイルを持っていると想像しているように、これを一つずつ行うのは非常に面倒です。

07:51.940 --> 07:53.580
&nbsp;

07:53.590 --> 07:56.070
もちろん、より良い方法があります。

07:56.080 --> 08:01.870
したがって、これらのファイルを1つずつ追加するのではなく、実際にはADDを取得するだけで、ドットを使用して現在のディレクトリ内のすべてを指定することができます。

08:01.870 --> 08:07.050
&nbsp;

08:07.060 --> 08:09.840
ストーリーディレクトリの中のすべて。

08:10.090 --> 08:14.740
だから、もし私が先に進み、enterを押すと、それは再び固定者になる。

08:14.920 --> 08:22.150
ステージング領域に2つの新しいファイルが追加されたことがわかりました。これらの2つのファイルを新しいセーブポイントへの新しいコミットにコミットしようとしています。

08:22.270 --> 08:26.580
&nbsp;

08:26.920 --> 08:30.110
そして、あなたが私と一緒に従っているなら、あなたは何をすべきかを知っています。

08:30.130 --> 08:35.570
先に進んで行きなさい。

08:35.570 --> 08:35.930
大丈夫。

08:35.930 --> 08:43.430
&nbsp;

08:43.430 --> 08:51.920
&nbsp;

08:51.920 --> 08:58.120
それでは、コマンドのメンバーがコミットしようとしている場合、Mフラグを使ってコミットメッセージを指定し、現在の時制のメッセージを書くつもりです第2章と第3章を完成させる。

08:58.940 --> 09:05.590
つまり、最初のコメントとこのコミットの間に私がやったことはすべてです。

09:05.600 --> 09:10.230
唯一の違いは、第3章で第2章を完成したということです。

09:10.250 --> 09:13.170
だから先に進み、enterを押しましょう。

09:13.550 --> 09:17.060
だからもう一度get logを使って調べてみましょう。

09:17.120 --> 09:24.170
一意であり、異なるので、異なるハッシュの両方で2つのコミットを持つことがわかります。

09:24.170 --> 09:25.230
&nbsp;

09:25.280 --> 09:32.990
最初のものは第1章が完成しましたが、この時に完成しました。その後約5分後に第2章と第3章が完成しました。

09:32.990 --> 09:36.100
&nbsp;

09:36.170 --> 09:38.110
それは第二のコミットでした。

09:38.480 --> 09:41.230
そして、これは私たちが現在いるところです。

09:41.270 --> 09:49.480
あなたはこのウッドヘッドの頭で見ることができますこれは我々がいる位置または現在の状態です。

09:49.490 --> 09:52.720
だからちょうど私たちがやったことをすぐに要約したい。

09:52.970 --> 09:58.440
そこで私たちはstoryディレクトリ内の作業ディレクトリにファイルを作成しました。

09:58.630 --> 10:05.990
したがって作業ディレクトリは、リポジトリを初期化するフォルダまたはディレクトリです。

10:06.100 --> 10:10.390
私たちがそれに入ると私たちは物語ディレクトリの中でそれをしました。

10:10.460 --> 10:12.540
それは作業ディレクトリになります。

10:12.740 --> 10:18.890
これからは、作業ディレクトリとローカルリポジトリの間に見られる変更を追跡して追跡します。

10:19.310 --> 10:22.090
&nbsp;

10:22.490 --> 10:31.040
だから最初は私たちはストーリー内の作業ディレクトリ内にファイルを作成し、それを追加してステージング領域に追加しました。

10:31.040 --> 10:34.310
&nbsp;

10:34.310 --> 10:39.740
作業ディレクトリからリポジトリに直接移動するだけでは不思議に思うかもしれないので、この中間ステージング領域が存在する理由です。

10:39.740 --> 10:42.470
&nbsp;

10:42.500 --> 10:44.690
なぜこの余分なステップが必要なのですか？

10:44.840 --> 10:52.430
場合によっては、追跡するすべてのファイルまたはコミットするすべてのファイルを追加したくない場合もあります。

10:52.430 --> 10:53.550
&nbsp;

10:53.600 --> 10:59.240
ステージングエリアは、無視したいことが何であるかを把握するのに適した場所です。

10:59.390 --> 11:01.970
そしてあなたが追跡したいものの一つ。

11:02.210 --> 11:09.200
commitコマンドを使って前進しコミットすることです。

11:09.200 --> 11:17.160
だから、我々はそれを使用し、ステージング領域にファイルを置いて、我々がコミットしようとしている変更に満足しているなら、次のステップはGet

11:17.180 --> 11:25.730
だから私たちのファイルは私たちのローカルリポジトリの中にあるので、ドットgetとそのバージョンにはコミットメッセージを通して名前が与えられます。

11:25.730 --> 11:27.340
&nbsp;

11:27.350 --> 11:35.540
&nbsp;

11:35.540 --> 11:43.820
&nbsp;

11:43.820 --> 11:46.200
つまり、ファイルを乱したとしても、バージョン管理下にある最後のバージョンを使用することができ、私たちのローカルリポジトリの最後の位置に戻るか、ロールバックするという特別なコマンドを使うことができます。

11:46.370 --> 11:52.080
ですから、コマンドラインでどのように見えるのか、私たちはそれを実際にどうやって行うのかを教えてください。

11:52.100 --> 11:57.410
だから私は3つのきれいに書かれた章があり、私の本は大きな売り手になるだろうという気持ちがあります。

11:57.410 --> 11:58.430
&nbsp;

11:58.450 --> 12:06.530
それでは、私は第3章で作業していたことを知っていて、すべてを完全に混乱させてしまいました。私のキーボードで眠ってしまったので、私はファイルを保存しました。

12:06.530 --> 12:13.910
&nbsp;

12:13.910 --> 12:20.140
そして今あなたがそれを見れば、それはちょうどmumbojumboであり、私は私の傑作を台無しにしました。

12:20.360 --> 12:25.170
しかし、バージョンコントロールを持っていて、有効にしておきましょう。

12:25.370 --> 12:28.270
だから我々は心配することはない。

12:28.610 --> 12:33.750
実際に作業ディレクトリでローカルに行った変更を元に戻すことができます。

12:33.770 --> 12:39.290
だから、この時点でget固定子を使用して、まだコミットされていない、またはステージング領域に追加されている第3章ドットテキストファイルに変更があることを確認できます。

12:39.280 --> 12:44.780
&nbsp;

12:44.840 --> 12:50.920
だから私たちが望むなら、私たちはこれを元の栄光に戻すことができます。

12:51.230 --> 12:57.920
しかし、これを行う前に、現在のバージョンの第3章とgetリポジトリの最後の保存ポイントの違いの1つをチェックするのに良いコマンドを使用することができます。

12:57.920 --> 13:03.100
&nbsp;

13:03.230 --> 13:06.860
ですから、get diffコマンドを使うことができます。

13:06.950 --> 13:12.350
その違いと私たちは3章のファイル名を与えます。

13:12.650 --> 13:17.210
あなたがenterを押すと、これが削除された部分であることがわかります。

13:17.210 --> 13:23.860
だから赤い部分は、これが私たちのゴブリンジクである追加された部分でした。

13:24.050 --> 13:29.600
&nbsp;

13:29.930 --> 13:36.480
&nbsp;

13:36.480 --> 13:41.390
だから、もし私がこれらの違いを見ていたら、新しいバージョンの第3章にはいくつかの間違いがあることを知っているかもしれません。私はいくつかのことをコピーしたり、現在のファイルを変更します。

13:41.700 --> 13:46.910
しかし、それ以外の時には、新しいファイルをトーチするだけでよいことが分かっているかもしれません。

13:46.920 --> 13:49.120
あなたはちょうどそれと何か関係がありません。

13:49.140 --> 13:52.710
そして、以前のバージョンに戻すのはむしろ大変です。

13:52.980 --> 13:59.370
だからあなたがそれをしたいのであれば、本当に本当にあなたにとって役に立つと思うチェックアウトを得るというコマンドがあります。

13:59.370 --> 14:00.510
&nbsp;

14:00.810 --> 14:03.190
だから、チェックアウトしてください。

14:03.210 --> 14:07.920
&nbsp;

14:07.920 --> 14:14.170
&nbsp;

14:14.170 --> 14:23.070
&nbsp;

14:23.070 --> 14:26.550
次にチェックアウトしたいファイルの名前を指定します。これは第3章のドットテキストです。あなたがちょうどここを見ていると、私が入力した3章の現在のバージョンのプレビューですこのコマンドは基本的に、この章3をローカルのリポジトリでコミットされた最後のバージョンにロールバックするように要求します。

14:26.550 --> 14:33.900
私がEnterを押すと、すぐに私の章3が以前の輝かしい状態に復元されていることがわかります。これは最後のチェックポイントの第3章のバージョンです。

14:34.440 --> 14:41.610
&nbsp;

14:41.640 --> 14:46.000
それは第2章と第3章で完成したものです。

14:46.020 --> 14:51.770
このレッスンでは、主に子供の地元の実装を見てきましたが、

14:51.840 --> 14:58.460
だから次のレッスンでこれらのバージョンを私たちのコンピュータにローカルに保存してみましょう。私はハブを取得し、リモートリポジトリを作成することについて話をします。

14:58.830 --> 15:02.580
&nbsp;
