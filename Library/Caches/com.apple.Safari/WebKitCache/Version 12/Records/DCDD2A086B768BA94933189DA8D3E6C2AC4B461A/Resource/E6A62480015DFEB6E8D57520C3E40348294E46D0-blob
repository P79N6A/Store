WEBVTT

00:00.570 --> 00:06.120
Now the first thing we're going to do is open up a terminal and inside Terminal we're going to navigate

00:06.120 --> 00:08.000
to our desktop.

00:08.010 --> 00:13.650
So if you're not familiar with the command line and you haven't watched the Marchal on the command line

00:13.980 --> 00:18.390
then I recommend you to take a look at it now because we're going to be using a lot of the commands

00:18.390 --> 00:20.790
to create directories and navigate around.

00:20.790 --> 00:25.290
So if you're not yet familiar then it's a good time to take a look at that.

00:26.010 --> 00:33.600
So the first thing I'm going to do is I'm going to CD into my desktop and here I'm going to create a

00:33.600 --> 00:43.920
new directory called story then I'm going to CD into this story directory and vice shoyu with ls.

00:43.920 --> 00:45.870
You can see that it's completely empty.

00:45.990 --> 00:50.420
And similarly inside finder I can show you the same thing.

00:50.430 --> 00:54.600
So let's go ahead and create some text files.

00:54.660 --> 01:01.590
So I'm going to use touch to create a file called Chapter 1 dot text and then I'm going to open chapter

01:01.590 --> 01:09.690
1 text and you can either do this by simply writing open and open it inside the default application

01:09.750 --> 01:11.880
which is text at it on a Mac.

01:12.120 --> 01:18.130
Alternatively you can use a text within the terminal for example Vin.

01:18.210 --> 01:21.770
Now this is only for people who are really familiar with this.

01:21.780 --> 01:24.050
So it's totally up to you what you decide to use.

01:24.090 --> 01:30.180
But if you are not familiar with using terminal based editors then it's probably a good idea to just

01:30.180 --> 01:33.920
stick with the open command and use textedit.

01:33.930 --> 01:39.110
So let's go ahead and open chapter 1 and let's write something inside Jawi

01:42.990 --> 01:43.350
OK.

01:43.360 --> 01:45.270
So that's my masterpiece done.

01:45.390 --> 01:49.440
I'm going to go ahead and hit save and I'm going to quit textedit.

01:49.570 --> 01:53.190
So that was our first chapter done.

01:53.380 --> 02:01.100
So now let's create a get local repository and start tracking some of these file changes.

02:01.450 --> 02:06.350
So to initialize get we simply write get in it.

02:06.340 --> 02:12.490
And as you can see it's initialized and empty get repository inside the story directory.

02:12.490 --> 02:17.230
Now if you have a look inside finder you actually can't see this dot good at all.

02:17.320 --> 02:18.900
But as we learned before.

02:18.970 --> 02:20.720
If you use LS A.

02:20.920 --> 02:26.620
You can see all the hidden files and you can see that Dogget is right there and it's going to be used

02:26.710 --> 02:32.320
to track all your changes to commit your changes and to perform version control.

02:32.320 --> 02:38.100
So we're currently inside the story directory and you can also call this the working directory.

02:38.110 --> 02:45.250
So as I mentioned before using it and learning about version control it comes with some of its own terminology

02:45.340 --> 02:46.570
and language.

02:46.570 --> 02:51.370
So I'm going to try and debunk and simplify a lot of these terms that you'll come across just so that

02:51.370 --> 02:55.440
we can all be on the same page and we all understand what's going on.

02:55.720 --> 03:01.770
So currently we are inside the working directory which is the story directory.

03:02.050 --> 03:07.750
And here in order just start tracking the changes of my files.

03:07.750 --> 03:15.350
For example chapter 1 dot text then I need to add this file to what's called a staging area.

03:15.790 --> 03:23.230
And that is basically a intermediate place where you can pick and choose which files inside your working

03:23.230 --> 03:26.270
directory that you want to commit.

03:26.320 --> 03:33.220
So to see what's currently inside your staging area you can use the get status command and it shows

03:33.220 --> 03:39.630
you that there are untracked files which will be shown in red and this is something that simply inside

03:39.630 --> 03:41.080
a working directory.

03:41.080 --> 03:42.410
So inside here.

03:42.550 --> 03:45.560
But it's not yet in the staging area.

03:45.610 --> 03:52.570
So in order to add it to the staging area and to start tracking changes in it then we have to use the

03:52.570 --> 03:53.940
command get.

03:54.020 --> 03:58.930
And so we're going to type get added and we're going to type the filename.

03:58.930 --> 04:01.730
So in this case it's Chapter 1 alt text.

04:01.960 --> 04:08.710
So go ahead and hit enter and then if we try using get status again you can see that that file has been

04:08.800 --> 04:11.820
added as a new file and it is now green.

04:11.830 --> 04:16.380
So this is now in the staging area and it's ready to be committed.

04:16.390 --> 04:20.260
So that's go ahead and commit this under version control.

04:20.260 --> 04:28.480
So the command is get commit and I'm going to use the dash and flag to add a commit message.

04:28.480 --> 04:31.450
So the commit message is really really important.

04:31.630 --> 04:38.140
It's something that helps you keep track of what changes you have made in each commit.

04:38.140 --> 04:47.200
So when you create a new save point you want to be as explicit as possible about what changes were made

04:47.230 --> 04:50.380
between the last save point and this current save point.

04:50.380 --> 04:58.420
So for our initial commit we can use something very simple like initial commit and this shows that this

04:58.420 --> 04:59.880
is our starting point.

05:00.100 --> 05:05.920
Alternatively if you want to be slightly more specific because in our case we've actually completed

05:05.920 --> 05:07.090
chapter 1.

05:07.090 --> 05:11.180
So you can write complete chapter 1.

05:11.200 --> 05:16.540
Now the thing that you'll realize is that usually with commit messages they are written in the present

05:16.540 --> 05:17.050
tense.

05:17.260 --> 05:18.600
And this is the best practice.

05:18.610 --> 05:25.210
So whereas it would probably make more sense I guess at least in my head anyways to write completed

05:25.270 --> 05:28.200
chapter one as this save point.

05:28.240 --> 05:32.680
It's actually by convention that you should always use the present tense.

05:32.680 --> 05:36.910
So it's like you are doing it now you're submitting your changes now.

05:37.000 --> 05:44.200
So let's go ahead and hit and turn to make our first commit and you can see what commits you have made

05:44.200 --> 05:47.290
by using the Get log command.

05:47.560 --> 05:53.320
So you can see that this commit was made at this time by this person.

05:53.540 --> 06:00.720
And it also has a hash and this hash uniquely identifies this particular commit.

06:00.910 --> 06:06.620
And then right at the end you see this commit message of what this save point was all about.

06:07.870 --> 06:12.310
So now I'm going to go ahead and create two more chapters.

06:12.340 --> 06:25.450
So let's just create Chapter Two dot text and chapter three dot text and now we have three chapters

06:25.720 --> 06:29.640
and I'm going to go in and change some of these text files.

06:29.680 --> 06:31.030
So let's say

06:41.270 --> 06:43.710
k so that's Chapter 2 done.

06:43.960 --> 06:49.330
And finally let's go ahead and just open chapter 3 and edit that as well.

07:00.930 --> 07:01.420
All right.

07:01.450 --> 07:03.720
So all three files have been changed.

07:03.760 --> 07:09.070
And over here in Finder you can actually get a quick peek at what the contents are which is going to

07:09.070 --> 07:14.520
be really useful for me to be able to demonstrate to you what it is doing behind the background.

07:14.800 --> 07:20.860
So now let's go ahead and read these two new files to our staging areas.

07:20.860 --> 07:28.180
So again if we use get status you can see that there's two files that are untracked which are only in

07:28.180 --> 07:31.970
the working directory and not yet inside the staging area.

07:32.290 --> 07:38.630
So we can put it into the staging area by simply adding each of them as we did before.

07:38.650 --> 07:42.610
Get add and writing something like Chapter Two dog tags.

07:42.630 --> 07:45.430
And then doing it chapter three dot text.

07:45.640 --> 07:51.940
But as you can imagine if you have quite a few files then it can get incredibly tedious having to do

07:51.940 --> 07:53.580
this one by one.

07:53.590 --> 07:56.070
So of course there is a better way.

07:56.080 --> 08:01.870
So instead of adding these files one by one we can actually simply just say get ADD and then use the

08:01.870 --> 08:07.050
dot to specify everything inside this current directory.

08:07.060 --> 08:09.840
So everything inside the story directory.

08:10.090 --> 08:14.740
So now if I go ahead and hit enter and then that's go to get stators again.

08:14.920 --> 08:22.150
You can see that the two new files that have been added to the staging area and now we're going to commit

08:22.270 --> 08:26.580
those two files to a new commit to a new save point.

08:26.920 --> 08:30.110
And you know what to do if you're following along with me.

08:30.130 --> 08:35.570
Go ahead and give it a go.

08:35.570 --> 08:35.930
All right.

08:35.930 --> 08:43.430
So how is that if you're a member of the command is get to commit and we're going to use the M flag

08:43.430 --> 08:51.920
to specify a commit message and we're going to write a message that is in the present tense so let's

08:51.920 --> 08:58.120
say complete chapter two and three.

08:58.940 --> 09:05.590
So that's everything I've done between the initial comment and this commit.

09:05.600 --> 09:10.230
The only difference is the fact that I've completed now chapter two in chapter three.

09:10.250 --> 09:13.170
So let's go ahead and and hit enter.

09:13.550 --> 09:17.060
So again let's check it out using get log.

09:17.120 --> 09:24.170
We can see that we now have two commits both with different hashes because they are unique and they

09:24.170 --> 09:25.230
are different.

09:25.280 --> 09:32.990
So the initial one was complete chapter 1 and it was done at this time and then later on about five

09:32.990 --> 09:36.100
minutes later I completed chapter two and three.

09:36.170 --> 09:38.110
And that was the second commit.

09:38.480 --> 09:41.230
And this is where we are at right now.

09:41.270 --> 09:49.480
So you can see by the head by this Woodhead This is the position or the current state that we are in.

09:49.490 --> 09:52.720
So I just want to quickly recap what we've just done.

09:52.970 --> 09:58.440
So we created a file in our working directory inside our story directory.

09:58.630 --> 10:05.990
So the working directory is the folder or the directory where you initialize your get repository.

10:06.100 --> 10:10.390
When we said get in it we did that inside the story directory.

10:10.460 --> 10:12.540
So that becomes a working directory.

10:12.740 --> 10:18.890
And from now on it is going to try and track the changes that it sees between the working directory

10:19.310 --> 10:22.090
and the local repository.

10:22.490 --> 10:31.040
So in the beginning we created a file inside our working directory inside story and then we used it

10:31.040 --> 10:34.310
to add to push it to the staging area.

10:34.310 --> 10:39.740
Now the reason why there is this intermediate staging area because you might wonder why not just go

10:39.740 --> 10:42.470
from the working directory straight to the repository.

10:42.500 --> 10:44.690
Why do we need this extra step.

10:44.840 --> 10:52.430
Well sometimes you might not want to add all of your files to be tracked or all of your files to be

10:52.430 --> 10:53.550
committed.

10:53.600 --> 10:59.240
So the staging area is a good place to try and figure out what are the things that you want to ignore.

10:59.390 --> 11:01.970
And one of the things that you want to be tracked.

11:02.210 --> 11:09.200
So once we've used it and we've put off file into the staging area and we're happy with the changes

11:09.200 --> 11:17.160
that we are going to commit then the next step is to go ahead and committed using the Get commit command.

11:17.180 --> 11:25.730
So now our file is inside our local repository so that dot get and that version is given a name through

11:25.730 --> 11:27.340
the commit message.

11:27.350 --> 11:35.540
So that means that even if we've messed up our file we can still use the last version that's under version

11:35.540 --> 11:43.820
control and we can use a special command called Get check out to revert back or roll back to the last

11:43.820 --> 11:46.200
position in our local repository.

11:46.370 --> 11:52.080
So let me show you what that looks like in the command line and how we would do that in practice.

11:52.100 --> 11:57.410
So at the moment I've got three nicely written chapters and I have a feeling my book is going to be

11:57.410 --> 11:58.430
a big seller.

11:58.450 --> 12:06.530
So now let's say that I have you know I've been working on chapter three and I have completely messed

12:06.530 --> 12:13.910
everything up and just you know fell asleep on my keyboard and I happened to have saved my file.

12:13.910 --> 12:20.140
And now if you have a look at it it's now just mumbojumbo and I've ruined my masterpiece.

12:20.360 --> 12:25.170
But ffin on because we have version control and we have it enabled.

12:25.370 --> 12:28.270
So we have nothing to worry about.

12:28.610 --> 12:33.750
I can actually revert the changes that I've made locally in my working directory.

12:33.770 --> 12:39.290
So at this point you can use get stators to see that we have modifications in our chapter three dot

12:39.280 --> 12:44.780
text file that have not yet been committed or added to the staging area.

12:44.840 --> 12:50.920
So if we wanted to we can actually revert this back to it's previous glory.

12:51.230 --> 12:57.920
But before we do that we can use a good command to check out one of the differences between the current

12:57.920 --> 13:03.100
version of chapter 3 and the last save point in our get repository.

13:03.230 --> 13:06.860
So to do that you can use the command get diff.

13:06.950 --> 13:12.350
So that difference and we'll give it the chapter 3 file name.

13:12.650 --> 13:17.210
And if you hit enter you can see that this is the part that was deleted.

13:17.210 --> 13:23.860
So the part in red and then this was the part that was added which is our gobbledygook.

13:24.050 --> 13:29.600
So now if I've looked at these differences it might just be that you know there's only a few mistakes

13:29.930 --> 13:36.480
in my new version of chapter 3 and I just want to maybe copy some things or have a look at how I did

13:36.480 --> 13:41.390
certain things previously and change my current file.

13:41.700 --> 13:46.910
But other times it might be that you know it's just you want to torch the new file.

13:46.920 --> 13:49.120
You just don't want anything to do with it.

13:49.140 --> 13:52.710
And you would much rather roll back to the previous version.

13:52.980 --> 13:59.370
So if you want to do that then there is a command called Get check out that is going to be really really

13:59.370 --> 14:00.510
useful for you.

14:00.810 --> 14:03.190
So get check out.

14:03.210 --> 14:07.920
And then we're going to specify the name of the file that we want to check out which is Chapter 3 dot

14:07.920 --> 14:14.170
text and if you just watch over here which is the preview of the current version of Chapter three dot

14:14.170 --> 14:23.070
text once I hit enter on this command that basically asks to roll back this chapter 3 to the last version

14:23.070 --> 14:26.550
that was committed in our local repository.

14:26.550 --> 14:33.900
So if I hit enter you can see that almost immediately my chapter 3 has been restored to its previous

14:34.440 --> 14:41.610
glorious state and this is the version of chapter 3 at the last checkpoint at which I committed it.

14:41.640 --> 14:46.000
So that was this one which is completed chapter 2 and 3.

14:46.020 --> 14:51.770
So whereas in this lesson we've looked mostly at local implementations of kids.

14:51.840 --> 14:58.460
So saving these versions on our computer locally in the next lesson I'm going to talk about get hub

14:58.830 --> 15:02.580
and creating remote repositories so I'll see the.
